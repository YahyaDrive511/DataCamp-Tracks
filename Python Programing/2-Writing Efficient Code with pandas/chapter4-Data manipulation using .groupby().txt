Got It!
1. Data transformation using .groupby().transform
Welcome back! In this final chapter, we will focus on the .groupby() family of pandas functions. They will help us group the entries of a DataFrame according to the values of a specific feature.

2. The restaurant dataset
To refresh your memory, we will review when and how to use the .groupby() function. The dataset we use in this chapter is a collection of people having dinner at a restaurant. For each person, we have various characteristics, including the total amount payed, the tip left to the waiter, the day of the week and the time of the day. The .groupby() method is applied to a DataFrame and groups it according to a feature. Then, we can apply some simple or more complicated functions on that grouped object. The simplest method to call is the .count() method. At first, we group the restaurant data according to whether the customer was a smoker or not. Then, we apply the .count() method. We obtain the count of smokers and non-smokers. It is no surprise that we get the same results for all the features, as the .count() method counts the number of occurrences of each group in each feature. As there are no missing values in our data, the results should be the same in all columns.

3. Data transformation
After grouping the entries of the DataFrame according to the values of a specific feature, we can apply any kind of transformation we are interested in. Here, we are going to apply the z score, a normalization transformation, which is the distance between each value and the mean, divided by the standard deviation. This is a very useful transformation in statistics, often used with the z-test in standardized testing. To apply this transformation to the grouped object, we just need to call the .transform() method containing the lambda transformation we defined. This time, we will group according to the type of meal: was it a dinner or a lunch? As the zscore transformation is a group-related transformation, the resulting table is just the original table. For each element, we subtract the mean and divide by the standard deviation of the group it belongs to. We can also see that numerical transformations are applied only to numerical features of the DataFrame.

4. Comparison with native methods
While the transform() method simplifies things a lot, is it actually more efficient than using native Python code? As we did before, we first group our data, this time according to sex. Then we apply the z score transformation we applied before, measuring its efficiency. We omit the code for measuring the time each operation here, as you are already familiar with this. We can see that with the use of the transform() function, we achieve a massive speed improvement. On top of that, we're only using one line to perform the operation of interest.

5. Let's practice!
I hope you're convinced about the importance of the transform() function in terms both of code cleanliness and efficiency. Try it yourself!


Got It!
1. Missing value imputation using transform()
Welcome back! Now that we have seen why and how to use the transform() function on a grouped pandas object, we will address a very specific task: missing value imputation.

2. Counting missing values
Before we actually see how we can use the transform() function for missing value imputation, we will see how many missing values there are in our variable of interest in each of the groups. We created a restaurant_nan dataset, in which the total bill of 45 random observations were set to NaN. We group the data according to the time of the day each meal was recorded, before and after adding the random missing values. Then, we count the number of non-missing values in each instance, and we print the difference. In this instance we see that there are 32 missing values in meals that came from dinner and 13 from lunch. Bear in mind that repeating the random generation of missing entries might affect the results. This proportion would change, since the removal was random.

3. Missing value imputation
After counting the number of missing values in our data, we will show how to fill the missing values with a group specific function. The most common choices are the mean and the median, and the selection has to do with the skewness of the data. As we did before, we define a lambda transformation using the fillna() function to replace every missing value with its group mean. As before, we group our data according to the time of the meal, and then replace the missing values by applying the pre-defined transformation. As we can see, the observations at index 0 and index 6 are exactly the same, which means that their missing value has been replaced by their group's mean.

4. Comparison with native methods
Our goal in this lesson is to show whether the use of the transform() function performs the task of imputing missing values faster than the native Python way. This script performs group-wise missing value imputation, like the transform() function does. Comparing the efficiency of both method, we can clearly see that the transform() function applied on a grouped object performs faster than the native Python code for this task.

5. Let's do it!
Now that we showed how efficient the transform() function is for group-wise missing value imputation, let's have you try it in the following exercises.



Got It!
1. Data filtration using the filter() function
In this last lesson, we will discuss how we can use the filter() function on a grouped pandas object. This allows us to include only a subset of those groups, based on some specific conditions.

2. Purpose of filter()
Often, after grouping the entries of a DataFrame according to a specific feature, we are interested in including only a subset of those groups, based on some conditions. Some examples of filtration conditions are the number of missing values, the mean of a specific feature, or the number of occurrences of the group in the dataset.

3. Filter using groupby().filter()
We are interested in finding the mean amount of tips given, in the days when the mean amount paid to the waiter is more than 20 USD. The .filter() function accepts a lambda function that operates on a DataFrame of each of the groups. In this example, the lambda function selects "total_bill" and checks that the mean() is greater than 20. If that lambda function returns True, then the mean() of the tip is calculated. If we compare to the total mean of the tips, we can see that there is a difference between the two values, meaning that the filtering was performed correctly.

4. Comparison with native methods
If we attempt to perform this operation without using groupby(), we end up with this inefficient code. At first, we use a list comprehension to extract the entries of the DataFrame that refer to days that have a mean meal greater than $20, and then use a for loop to append them into a list and calculate the mean. It might seem very intuitive, but as we see, it's also very inefficient.

5. Let's do it!
Now it's your turn to filter!



Got It!
1. Data filtration using the filter() function
In this last lesson, we will discuss how we can use the filter() function on a grouped pandas object. This allows us to include only a subset of those groups, based on some specific conditions.

2. Purpose of filter()
Often, after grouping the entries of a DataFrame according to a specific feature, we are interested in including only a subset of those groups, based on some conditions. Some examples of filtration conditions are the number of missing values, the mean of a specific feature, or the number of occurrences of the group in the dataset.

3. Filter using groupby().filter()
We are interested in finding the mean amount of tips given, in the days when the mean amount paid to the waiter is more than 20 USD. The .filter() function accepts a lambda function that operates on a DataFrame of each of the groups. In this example, the lambda function selects "total_bill" and checks that the mean() is greater than 20. If that lambda function returns True, then the mean() of the tip is calculated. If we compare to the total mean of the tips, we can see that there is a difference between the two values, meaning that the filtering was performed correctly.

4. Comparison with native methods
If we attempt to perform this operation without using groupby(), we end up with this inefficient code. At first, we use a list comprehension to extract the entries of the DataFrame that refer to days that have a mean meal greater than $20, and then use a for loop to append them into a list and calculate the mean. It might seem very intuitive, but as we see, it's also very inefficient.

5. Let's do it!
Now it's your turn to filter!



