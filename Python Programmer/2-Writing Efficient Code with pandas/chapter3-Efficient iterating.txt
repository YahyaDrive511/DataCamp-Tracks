Got It!
1. Looping using the .iterrows() function
Welcome to the third chapter! You now know how to optimize your rows and columns selections, and your value replacements. It's time to learn how to iterate through a pandas DataFrame in the most efficient fashion. The method we will introduce in this lesson is the .iterrows() function.

2. The poker dataset
We will use the poker dataset, that you already encountered in the first chapter. Let's refresh your memory. Each row symbolizes a player's hand in a poker game, which consists of five cards. In each column, we have the Symbol and the Rank for each of the five cards, symbolized by S and R, and the number of the respective card. For example, in the first hand, we have a 10 of diamonds, a Jack and a King of clubs, a 4 of spades and an Ace of hearts.

3. Generators in Python
Before we talk about how to use the .iterrows() function, let's refresh the notion of a generator function. Generators are a simple tool to create iterators. Inside the body of a generator, instead of return statements, you will find only yield() statements. There can be just one, or several yield() statements. Here, we can see a generator, city_name_generator(), that produces four city names. We assign the generator to the variable city_names for simplicity.

4. Generators in Python
In order to access the elements that a generator yields, we use Python's next() function. Each time the next() command is used, the generator will produce the next value to yield, until there are no more values to yield. In our example, we can call next() once, so we can print 'New York' to our screen, then a second time to print 'London' and so on until we yield 'Sao Paolo'. Then, if we attempt to produce the next argument, an error message appears as expected.

5. Looping using the .iterrows() function
The .iterrows() function is a property of every pandas DataFrame. When called, it produces a list with two elements. We will use this generator to iterate through each line of our poker DataFrame. The first element is the index of the row, while the second element contains a pandas Series of each feature of the row: the Symbol and the Rank for each of the five cards. It is very similar to the notion of the enumerate() function, which when applied to a list, returns each element along with its index.

6. Using the .iterrows() function
The most intuitive way to iterate through a Pandas DataFrame is to use the range() function, which is often called crude looping. One smarter way to iterate through a pandas DataFrame is to use the .iterrows() function, which is optimized for this task. We simply define the 'for' loop with two iterators, one for the number of each row and the other for all the values. Inside the loop, the next() command indicates that the loop moves to the next value of the iterator, without actually doing something. We can also notice that the use of .iterrows() does not improve the speed of iterating through a pandas DataFrame. It is very useful though when we need a cleaner way to use the values of each row while iterating through the dataset.

7. Let's do it!
We just learned a method having the advantage of presenting clean code, and the disadvantage of not being very time efficient, to iterate through a pandas DataFrame. Why not try this method then? Let's do it!


Got It!
1. Looping using the .apply() function
Great job on iterating through pandas DataFrames! We will now use the .apply() function to perform a specific task, while iterating through a pandas DataFrame.

2. The .apply() function
We'll keep using the poker dataset. The .apply() function does exactly what it says; it applies another function to the whole DataFrame. The syntax of the .apply() function is simple: we create a mapping, using a lambda function in this case, and then declare the function we want to apply to every cell. Here, we're applying the square root function to every cell of the DataFrame. In terms of speed, it matches the speed of just using the NumPy sqrt() function over the whole DataFrame.

3. The .apply() function for rows
But what happens when the function of interest is taking more than one cell as an input? For example, what if we want to calculate the sum of the rank of all the cards in each hand? In this case, we will use the .apply() function the same way as we did before, but we need to add 'axis=1' at the end of the line to specify we're applying the function to each row. The, we will use the .iterrows() function we saw on the previous lesson to do the same, and compare their efficiency. Using the .apply() function is significantly faster than the .iterrows() function, in a magnitude of around 400 percent, which is a massive improvement!

4. The .apply() function for columns
As we did with rows, we can do exactly the same thing for the columns; apply one function to each column. By replacing the axis=1 with axis=0, we can apply the sum function on every column. By comparing the .apply() function with the native pandas function for summing over rows, we can see that pandas' native .sum() functions performs the same operation faster. In conclusion, we observe that the .apply() function performs faster when we want to iterate through all the rows of a pandas DataFrame, but is slower when we perform the same operation through a column.

5. Let's do it!
Now that we saw the pros and cons of each application of the .apply() method, let's give it a try!


Got It!
1. Vectorization over Pandas series
Welcome back! In this part of the course we will discuss another efficient method to loop through a pandas DataFrame and apply specific functions: the vectorization over pandas Series.

2. DataFrames as arrays
To understand how we can reduce the amount of iteration performed by the function, recall that the fundamental units of Pandas, DataFrames and Series, are both based on arrays. Pandas performs more efficiently when an operation is performed to a whole array than to each value separately or sequentially. Vectorization is the process of executing operations on entire arrays.

3. How to perform pandas vectorization
We will show how to perform pandas vectorization using the poker dataset. Again, we want to calculate the sum of the ranks of all the cards in each hand. In order to do that, we slice the poker dataset keeping only the columns that contain the ranks of each card, as we showed in previous lessons. Then, we call the built-in .sum() property of the DataFrame, using the parameter axis = 1 to denote that we want the sum for each row. In the end, we print the sum of the first five rows of the data.

4. Comparison to the previous methods
In the previous lessons, we saw various methods that perform function application to a DataFrame faster than simply iterating through all the rows of DataFrame. Our goal is to find the most efficient method to perform this task. Comparing the time it takes to sum the ranks of all the cards in each hand using vectorization, the .iterrows() function and the .apply() function, we can see that the vectorization method performs a lot better.

5. Let's do it!
But don't take our word for it, test vectorization's performance yourself!



Got It!
1. Vectorization with NumPy arrays using .values()
To close this chapter, we will discuss another vectorization method to efficiently iterate over a pandas DataFrame and apply a specific function, using NumPy arrays.

2. NumPy in pandas
The NumPy library, which defines itself as a "fundamental package for scientific computing in Python", performs operations under the hood in optimized, pre-compiled C code. Similar to pandas working with arrays, NumPy operates on arrays called ndarrays. A major difference between Series and ndarrays is that ndarrays leave out many operations such as indexing, data type checking, etc. As a result, operations on NumPy arrays can be significantly faster than operations on pandas Series. NumPy arrays can be used in place of pandas Series when the additional functionality offered by pandas Series isn’t critical.

3. How to perform NumPy vectorization
For the problems we explore in this course, we could use NumPy ndarrays instead of pandas series. The question at stake is whether this would be more efficient. We will show how to perform NumPy vectorization using the same poker dataset as in the previous lessons. Again, we want to calculate the sum of the ranks of all the cards in each hand. We convert our rank arrays from pandas Series to NumPy arrays simply by using the .values method of pandas Series, which returns a pandas Series as a NumPy ndarray. As with vectorization on the series, passing the NumPy array directly into the function will lead pandas to apply the function to the entire vector. At this point, we could choose to call it a day; vectorizing over pandas series achieves the overwhelming majority of optimization needs for everyday calculations. However, if speed is of highest priority, we can call in reinforcements in the form of the NumPy Python library. Comparing to the previous state of the art method, the pandas optimization, we still get an improvement on the operating time.

4. Let's do it!
Now you know all the possible ways to iterate through a pandas DataFrame and implement a simple function for every row. Let's vectorize!

